name: Java CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production

concurrency:
  group: java-ci-cd-${{ github.event.inputs.environment }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [11]
    env:
      MAVEN_CACHE_DIR: ~/.m2/repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ${{ env.MAVEN_CACHE_DIR }}
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Maven test
        run: mvn test

      - name: Maven build
        run: mvn package --file pom.xml

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: docker.io/myorg/myapp:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and load Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          load: true

      - name: Trivy Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}

      - name: Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          push: true

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment != '' }}
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Helm Chart
        run: |
          echo "Deploying to environment: ${{ github.event.inputs.environment }}"
          helm upgrade --install myapp ./charts/myapp \
            --namespace ${{ github.event.inputs.environment }} \
            --set image.tag=${{ github.sha }}
