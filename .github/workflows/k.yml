name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: ghcr.io/${{ github.repository }}:latest
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: https://sonarcloud.io
      OWASP_DATA_DIR: ./owasp-data

    steps:
      # 1. Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Java environment
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # 3. Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Run Maven tests
      - name: Run tests
        run: mvn test --batch-mode

      # 5. Build with Maven
      - name: Maven build
        run: mvn clean install --batch-mode

      # 6. SonarQube Scan
      - name: SonarQube Scan
        run: mvn sonar:sonar -Dsonar.projectKey=<your_project_key> -Dsonar.host.url=${{ env.SONAR_HOST_URL }} -Dsonar.login=${{ env.SONAR_TOKEN }}

      # 7. OWASP Dependency Check
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "My Java App"
          path: "."
          format: "ALL"
          out: "reports"
          data: ${{ env.OWASP_DATA_DIR }}

      # 8. Set up Docker Buildx
      - uses: docker/setup-buildx-action@v3

      # 9. Build Docker image
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          load: true

      # 10. Trivy Image Scan
      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      # 11. Docker Login (GitHub Container Registry)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 12. Push Docker image (only on main)
      - name: Push Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
